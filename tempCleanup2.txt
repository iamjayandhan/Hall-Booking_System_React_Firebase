const admin = require("firebase-admin");
const path = require("path");

// Replace the following path with the correct path to your key.json file
const serviceAccount = require(path.resolve(__dirname, "../../key.json"));

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://hall-allocation-c720d.firebaseio.com",
});

const now = new Date();

// Reference to the "bookings" collection in Firestore
const db = admin.firestore();
const bookingsRef = db.collection("bookings");

console.log("Cleanup function started at", now.toISOString());

// Create two separate queries for "date" and "endTime" filters
const dateQuery = bookingsRef.where("date", "<=", now.toISOString().split("T")[0]);
const endTimeQuery = bookingsRef.where("endTime", "<=", now.toTimeString().split(" ")[0]);

// Perform the queries
Promise.all([dateQuery.get(), endTimeQuery.get()])
  .then(([dateSnapshot, endTimeSnapshot]) => {
    // Combine the results of the two queries
    const expiredBookings = new Set();

    dateSnapshot.forEach((doc) => {
      if (endTimeSnapshot.docs.some((endTimeDoc) => endTimeDoc.id === doc.id)) {
        expiredBookings.add(doc.id);
      }
    });

    if (expiredBookings.size > 0) {
      const batch = db.batch();

      expiredBookings.forEach((bookingId) => {
        const bookingRef = bookingsRef.doc(bookingId);
        batch.delete(bookingRef);
        console.log("Deleted expired booking:", bookingId);
      });

      return batch.commit();
    } else {
      console.log("No expired bookings found.");
      return Promise.resolve();
    }
  })
  .then(() => {
    console.log("Expired bookings cleaned up successfully.");
  })
  .catch((error) => {
    console.error("Error cleaning up expired bookings:", error);
  });
